AWSTemplateFormatVersion: "2010-09-09"      

Resources:

#-------------------------------------
#Load Balancer SecurityGroup

  albSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: albSecurityGroup
      GroupName: albSecurityGroup
      VpcId: !ImportValue VPCid
      SecurityGroupIngress:
        -  IpProtocol: tcp
           FromPort: 80 #HTTP
           ToPort: 80
           CidrIp: 0.0.0.0/0  
        -  IpProtocol: tcp
           FromPort: 443 #HTTPS
           ToPort: 443
           CidrIp: 0.0.0.0/0
      Tags: 
        -  Key: Name
           Value: albSecurityGroup

#------------------------------------------
#Load balancer 
  cfloadbalancer:    
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application #種類(application, gateway, network)
      IpAddressType: ipv4
      Name: cfloadbalancer 
      Scheme: internet-facing 
      SecurityGroups:
        - !Ref albSecurityGroup
      Subnets:
        - !ImportValue LBsubnet1a
        - !ImportValue LBsubnet1c
      #SubnetMappings:
        #- AllocationId: 
      LoadBalancerAttributes:  #属性
        - Key: deletion_protection.enabled  #削除保護
          Value: false
        - Key: idle_timeout.timeout_seconds
          Value: 60 
        - Key: routing.http2.enabled #default: true
          Value: true  
        - Key: routing.http.desync_mitigation_mode  #セキュリティリスクがあるときにLoad balancerがどのように対応するか
          Value: defensive
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: false
      Tags: 
        - Key: Name
          Value: cfloadbalancer

#-------------------------------------------------
#Listener

  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward 
          ForwardConfig:
            TargetGroups: 
              - TargetGroupArn: !Ref cfALBTarget   
      LoadBalancerArn: !Ref cfloadbalancer
      Port: 80
      Protocol: HTTP 

  #HTTPS Listener

#--------------------------------------------------
#ALB Target

  cfALBTarget:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5  #レスポンスが何もないときに何秒でタイムアウトするか
      HealthyThresholdCount: 5  #何回成功が続いたらhealthyと判断するか
      Matcher: 
        HttpCode: 200 #どのコードを使ってhealth checkを確認するか。
      Name: cfALBTargetGroup  #ターゲットグループの名前。
      Port: 80 #for route traffic
      Protocol: HTTP #for route traffic
      TargetType:  instance
      Targets:
        - Id: !ImportValue LBLinuxInstance
          Port: 3000
      UnhealthyThresholdCount: 2  #何回失敗が続いたらunhealthyと判断するか
      VpcId: !ImportValue VPCid
      Tags:
        - Key: Name 
          Value: cfALBTarget  

#-----------------------------------------------------------------
#Elastic IP
  MytestEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      InstanceId: !ImportValue LBLinuxInstance
      PublicIpv4Pool: 10.0.0.80
      Tags: 
        - Key: Name
          Value: MytestEIP


     



#HealthCheckEnabled: デフォルトで変えられない、lambdaの場合は使えない。
#HealthCheckPath: デフォルトはHTTP1, HTTP2の場合は/
#TargetGroupAttributes: